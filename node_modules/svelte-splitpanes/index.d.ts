import type { Readable } from 'svelte/store';
export { default as Splitpanes } from './Splitpanes.svelte';
export { default as Pane } from './Pane.svelte';
export type PaneInitFunction = (key: any) => {
    undefinedPaneInitSize: number;
};
export interface ClientCallbacks {
    onSplitterDown: (_event: TouchEvent | MouseEvent) => void;
    onSplitterClick: (event: MouseEvent) => void;
    onSplitterDblClick: (_event: MouseEvent) => void;
    onPaneClick: (_event: MouseEvent) => void;
    /** Report the manual given size was changed. */
    reportGivenSizeChange: (newGivenSize: number | null) => void;
}
export interface SplitContext {
    /** Tells the key of the very first pane, or undefined if not recieved yet. */
    veryFirstPaneKey: Readable<any>;
    isHorizontal: Readable<boolean>;
    showFirstSplitter: Readable<boolean>;
    ssrRegisterPaneSize?: (size: number | null) => void;
    onPaneInit: PaneInitFunction;
    clientOnly?: {
        onPaneAdd: (pane: IPane) => ClientCallbacks;
        onPaneRemove: (key: any) => Promise<void>;
    };
}
export interface IPaneSizingEvent {
    min: number;
    max: number;
    size: number;
    snap: number;
}
export interface IPane {
    key: any;
    element: HTMLElement;
    index?: number;
    min: () => number;
    max: () => number;
    snap: () => number;
    sz: () => number;
    setSz: (number: number) => void;
    setSplitterActive: (isActive: boolean) => void;
    givenSize: number | null;
    isReady: boolean;
}
