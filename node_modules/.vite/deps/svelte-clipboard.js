import "./chunk-6A2TAOKG.js";
import {
  SvelteComponentDev,
  add_location,
  append_styles,
  attr_dev,
  binding_callbacks,
  createEventDispatcher,
  create_slot,
  detach_dev,
  dispatch_dev,
  element,
  get_all_dirty_from_scope,
  get_slot_changes,
  init,
  insert_dev,
  onMount,
  prop_dev,
  safe_not_equal,
  space,
  tick,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-K6MJRMI7.js";
import "./chunk-FAW2VN4A.js";

// node_modules/svelte-clipboard/src/Clipboard.svelte
var file = "C:/Users/david/Code/IADesign.Space/node_modules/svelte-clipboard/src/Clipboard.svelte";
function add_css(target) {
  append_styles(target, "svelte-w8w2mp", "textarea.svelte-w8w2mp{left:0;bottom:0;margin:0;padding:0;opacity:0;width:1px;height:1px;border:none;display:block;position:absolute}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xpcGJvYXJkLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiQUFtQkUsUUFBUSxjQUFDLENBQUEsQUFDUCxJQUFJLENBQUUsQ0FBQyxDQUNQLE1BQU0sQ0FBRSxDQUFDLENBQ1QsTUFBTSxDQUFFLENBQUMsQ0FDVCxPQUFPLENBQUUsQ0FBQyxDQUNWLE9BQU8sQ0FBRSxDQUFDLENBQ1YsS0FBSyxDQUFFLEdBQUcsQ0FDVixNQUFNLENBQUUsR0FBRyxDQUNYLE1BQU0sQ0FBRSxJQUFJLENBQ1osT0FBTyxDQUFFLEtBQUssQ0FDZCxRQUFRLENBQUUsUUFBUSxBQUNwQixDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkNsaXBib2FyZC5zdmVsdGUiXX0= */");
}
var get_default_slot_changes = (dirty) => ({});
var get_default_slot_context = (ctx) => ({ copy: (
  /*copy*/
  ctx[2]
) });
function create_fragment(ctx) {
  let t;
  let textarea_1;
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[4].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[3],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
      t = space();
      textarea_1 = element("textarea");
      textarea_1.value = /*text*/
      ctx[0];
      attr_dev(textarea_1, "class", "svelte-w8w2mp");
      add_location(textarea_1, file, 34, 0, 537);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      insert_dev(target, t, anchor);
      insert_dev(target, textarea_1, anchor);
      ctx[5](textarea_1);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[3],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[3]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[3],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
      if (!current || dirty & /*text*/
      1) {
        prop_dev(
          textarea_1,
          "value",
          /*text*/
          ctx2[0]
        );
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
      if (detaching)
        detach_dev(t);
      if (detaching)
        detach_dev(textarea_1);
      ctx[5](null);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Clipboard", slots, ["default"]);
  const dispatch = createEventDispatcher();
  let { text } = $$props;
  let textarea;
  async function copy() {
    textarea.select();
    document.execCommand("Copy");
    await tick();
    textarea.blur();
    dispatch("copy");
  }
  $$self.$$.on_mount.push(function() {
    if (text === void 0 && !("text" in $$props || $$self.$$.bound[$$self.$$.props["text"]])) {
      console.warn("<Clipboard> was created without expected prop 'text'");
    }
  });
  const writable_props = ["text"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Clipboard> was created with unknown prop '${key}'`);
  });
  function textarea_1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      textarea = $$value;
      $$invalidate(1, textarea);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("text" in $$props2)
      $$invalidate(0, text = $$props2.text);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    onMount,
    tick,
    createEventDispatcher,
    dispatch,
    text,
    textarea,
    copy
  });
  $$self.$inject_state = ($$props2) => {
    if ("text" in $$props2)
      $$invalidate(0, text = $$props2.text);
    if ("textarea" in $$props2)
      $$invalidate(1, textarea = $$props2.textarea);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [text, textarea, copy, $$scope, slots, textarea_1_binding];
}
var Clipboard = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { text: 0 }, add_css);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Clipboard",
      options,
      id: create_fragment.name
    });
  }
  get text() {
    throw new Error("<Clipboard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set text(value) {
    throw new Error("<Clipboard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var Clipboard_default = Clipboard;
export {
  Clipboard_default as default
};
//# sourceMappingURL=svelte-clipboard.js.map
